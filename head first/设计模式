依赖简单的理解，就是一个类A中的方法使用到了另一个类B。
当你直接实例化一个对象时，就是在依赖他的具体类

依赖、组合、聚合、继承的区别与联系

设计原则：
1、找出应用中可能需要变化之处，把他们独立出来，不要和那些不需要变化的代码混在一起
2、争对接口编程而不是争对实现编程
3、多用组合，少用继承
4、为了交互对象之间的松耦合设计而努力
5、开放封闭原则：类应该对扩展开放，对修改封闭
6、依赖倒转原则：要依赖抽象，不要依赖具体类

设计模式：
1、策略模式：定义一系列的算法,把每一个算法封装起来, 并且使它们可相互替换。此模式让算法的变化独立于使用算法的客体
2、观察者模式：定义了对象之间一对多依赖，这样一来，当一个对象改变状态时，他所有的依赖者都会收到通知并自动更新
   mvc架构是观察者模式的一个典型应用场景
3、装饰者模式：动态地将责任附加到对象上，若要扩展功能，装饰者提供了比继承更具有弹性的替代方案
4、工厂模式
   工厂顾名思义就是创建产品，根据产品是具体产品还是具体工厂可分为简单工厂模式和工厂方法模式，根据工厂的抽象程度可分为工厂方法模式和抽象工厂模式。
   简单工厂模式：定义一个工厂类，他可以根据参数的不同返回不同类的实例，被创建的实例通常都具有共同的父类
   工厂方法模式：定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。
                和简单工厂模式中工厂负责生产所有产品相比，工厂方法模式将生成具体产品的任务分发给具体的产品工厂
   抽象工厂模式：上面两种模式不管工厂怎么拆分抽象，都只是针对一类产品Phone（AbstractProduct），如果要生成另一种产品PC，应该怎么表示呢？
                抽象工厂模式通过在AbstarctFactory中增加创建产品的接口，并在具体子工厂中实现新加产品的创建
5、单例模式：确保一个类只有一个实例，并提供一个全局访问点
  
